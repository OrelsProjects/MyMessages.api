generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id            String        @id @unique
  first_name    String
  last_name     String
  email         String        @unique
  number        String
  gender        String
  is_active     Boolean
  created_at    DateTime      @default(now())
  display_name  String?
  web_user_id   String?       @unique
  photo_url     String?
  deleted_calls DeletedCall[]
  folders       Folder[]
  messages      Message[]
  PhoneCall     PhoneCall[]
  settings      Settings[]
  OngoingCall   OngoingCall[]

  @@map("app_users")
}

model PhoneCall {
  id                String        @id @default(uuid())
  old_phone_call_id String?
  number            String
  start_date        DateTime?     @default(now())
  end_date          DateTime?     @default(now())
  actual_end_date   DateTime?     @default(now())
  type              String
  is_answered       Boolean
  user_id           String
  is_active         Boolean
  contact_name      String
  created_at        DateTime      @default(now())
  messages_sent     MessageSent[]
  app_user          AppUser       @relation(fields: [user_id], references: [id])

  @@unique([user_id, number, start_date])
  @@map("phone_calls")
}

model Folder {
  id                String            @id @default(uuid())
  title             String
  times_used        Int
  position          Int
  user_id           String
  is_active         Boolean
  created_at        DateTime          @default(now())
  app_user          AppUser           @relation(fields: [user_id], references: [id])
  message_in_folder MessageInFolder[]

  @@map("folders")
}

model Message {
  id                 String            @id @default(uuid())
  user_id            String
  title              String
  short_title        String
  body               String
  position           Int
  times_used         Int
  is_active          Boolean
  created_at         DateTime          @default(now())
  app_user           AppUser           @relation(fields: [user_id], references: [id])
  messages_in_folder MessageInFolder[]

  @@map("messages")
}

model DeletedCall {
  id         String   @id @default(uuid())
  user_id    String
  deleted_at DateTime @default(now())
  number     String
  app_user   AppUser  @relation(fields: [user_id], references: [id])

  @@map("deleted_calls")
}

model MessageInFolder {
  id              String   @id @default(uuid())
  message_id      String
  folder_id       String
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  user_id_message String?
  user_id_folder  String?
  folder          Folder   @relation(fields: [folder_id], references: [id])
  message         Message  @relation(fields: [message_id], references: [id])

  @@unique([message_id, folder_id])
  @@map("messages_in_folders")
}

model MessageSent {
  id            String    @id @default(uuid())
  sent_at       DateTime? @default(now())
  message_id    String
  phone_call_id String
  is_active     Boolean
  created_at    DateTime  @default(now())
  phoneCall     PhoneCall @relation(fields: [phone_call_id], references: [id], onDelete: Cascade)

  @@map("messsages_sent")
}

model Settings {
  id          String   @id @default(uuid())
  key         String
  value       String
  user_id     String
  enabled     Boolean
  modified_at DateTime @default(now()) @updatedAt
  AppUser     AppUser  @relation(fields: [user_id], references: [id])

  @@unique([key, user_id])
  @@map("settings")
}

model OngoingCall {
  id         String   @id @default(uuid())
  user_id    String
  number     String
  contact_name    String
  created_at DateTime @default(now())

  app_user AppUser? @relation(fields: [user_id], references: [id])

  @@map("ongoing_calls")
}
