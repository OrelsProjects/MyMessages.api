# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ideologicalperch
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: mymessages
service: mymessages-api
configValidationMode: error

custom:
  myStage: ${opt:stage, self:provider.stage}
  myProfile:
    prod: MyMessages
    dev: MyMessages

  secrets:
    prod: ${file(secrets_prod.json)}
    dev: ${file(secrets_dev.json)}

  serverless-offline:
    httpPort: 4871
    websocketPort: 4872
    lambdaPort: 4873

build:
  esbuild: false

package:
  exclude:
    - node_modules/aws-sdk/**
    - node_modules/@aws-sdk/**
    - node_modules/@types/aws-sdk/**

provider:
  name: aws
  stage: dev
  runtime: nodejs20.x
  profile: ${self:custom.myProfile.${self:custom.myStage}}
  timeout: 900

  iam:
    role: LambdaRole

  environment:
    DATABASE_URL: ${self:custom.secrets.${self:custom.myStage}.DATABASE_URL}

    FEATURE_DEEPSIAM_BASE_URL: ${self:custom.secrets.${self:custom.myStage}.FEATURE_DEEPSIAM_BASE_URL}
    FEATURE_DEEPSIAM_API_KEY: ${self:custom.secrets.${self:custom.myStage}.FEATURE_DEEPSIAM_API_KEY}

functions:
  ## Users ##
  get_user:
    handler: src/api/users.getUser
    events:
      - httpApi:
          path: /users
          method: get

  create_user:
    handler: src/api/users.createUser
    events:
      - httpApi:
          path: /users
          method: post

  # Users ##

  ## Messages ##
  get_messages:
    handler: src/api/messages.getMessages
    events:
      - httpApi:
          path: /messages
          method: get

  create_message:
    handler: src/api/messages.createMessage
    events:
      - httpApi:
          path: /messages
          method: post

  update_message:
    handler: src/api/messages.updateMessage
    events:
      - httpApi:
          path: /messages
          method: patch

  ## Messages ##

  ## Folders ##
  get_folders:
    handler: src/api/folders.getFolders
    events:
      - httpApi:
          path: /folders
          method: get

  get_deleted_folders:
    handler: src/api/folders.getDeletedFolders
    events:
      - httpApi:
          path: /folders/deleted
          method: get

  create_folder:
    handler: src/api/folders.createFolder
    events:
      - httpApi:
          path: /folders
          method: post

  update_folder:
    handler: src/api/folders.updateFolder
    events:
      - httpApi:
          path: /folders
          method: patch

  delete_folder:
    handler: src/api/folders.deleteFolder
    events:
      - httpApi:
          path: /folders/{id}
          method: delete

  # ## Folders ##

  ## Messages in Folders ##
  delete_messages:
    handler: src/api/messagesInFolders.deleteMessagesFromFolder
    events:
      - httpApi:
          path: /messagesInFolders/{folder_id}
          method: delete

  ## Messages in Folders ##

  ## Deleted Calls ##
  get_deleted_calls_by_date:
    handler: src/api/deletedCalls.getDeletedCallsByDate
    events:
      - httpApi:
          path: /deletedCalls/{from_date}
          method: get

  get_deleted_calls:
    handler: src/api/deletedCalls.getDeletedCalls
    events:
      - httpApi:
          path: /deletedCalls
          method: get

  create_deleted_call:
    handler: src/api/deletedCalls.createDeletedCall
    events:
      - httpApi:
          path: /deletedCalls
          method: post

  ## Deleted Calls ##

  ## Phone Calls ##
  create_phone_call:
    handler: src/api/phone-calls/phonecalls.createPhoneCall
    events:
      - httpApi:
          path: /phoneCall
          method: post

  create_phone_calls:
    handler: src/api/phone-calls/phonecalls.createPhoneCalls
    events:
      - httpApi:
          path: /phoneCalls
          method: post
  ## Phone Calls ##

  ## Ongoing Calls ##
  create_ongoing_call:
    handler: src/api/ongoing-calls/handler.createOngoingCall
    events:
      - httpApi:
          path: /ongoing-call
          method: post

  get_latest_ongoing_call:
    handler: src/api/ongoing-calls/handler.getLatestOngoingCall
    events:
      - httpApi:
          path: /ongoing-call/latest
          method: get
  ## Ongoing Calls ##

  ## Settings ##
  get_settings:
    handler: src/api/settings/settings.getSettings
    events:
      - httpApi:
          path: /settings/{key}
          method: get

  get_all_settings:
    handler: src/api/settings/settings.getSettings
    events:
      - httpApi:
          path: /settings
          method: get

  update_settings:
    handler: src/api/settings/settings.updateSettings
    events:
      - httpApi:
          path: /settings
          method: patch

  ## Settings ##

  ## Statistics ##

  get_calls_count_by_day_2_dates:
    handler: src/api/statistics.getCallsCountByDay
    events:
      - httpApi:
          path: /statistics/callsCountByDay/{start_date}/{end_date}
          method: get

  get_calls_count_by_day_1_date:
    handler: src/api/statistics.getCallsCountByDay
    events:
      - httpApi:
          path: /statistics/callsCountByDay/{start_date}
          method: get

  get_calls_count_by_day:
    handler: src/api/statistics.getCallsCountByDay
    events:
      - httpApi:
          path: /statistics/callsCountByDay
          method: get
  ## Statistics ##

  # Migration
  # migrate_database:
  #   handler: src/api/migration/migrateDatabase.handler
  #   events:
  #     - httpApi:
  #         path: /migrate
  #         method: post
# Migration

resources:
  Resources:
    LambdaRole: ${file(./resource/LambdaRole.yml)}

plugins:
  # - serverless-offline
  - serverless-plugin-typescript
  # - serverless-prune-plugin
  # - serverless-plugin-include-dependencies
